
DISPLAY_7_SEG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000174  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  00000212  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007e1  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e9  00000000  00000000  00000a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000340  00000000  00000000  0000117e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  000014c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000400  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000099  00000000  00000000  00001910  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000019a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 76 00 	call	0xec	; 0xec <main>
  9e:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <cambio>:
		
	}
}

void cambio(void){
	if(getstatusb1() == 0){
  a6:	19 99       	sbic	0x03, 1	; 3
  a8:	0b c0       	rjmp	.+22     	; 0xc0 <cambio+0x1a>
		while(getstatusb1()==0);
  aa:	19 9b       	sbis	0x03, 1	; 3
  ac:	fe cf       	rjmp	.-4      	; 0xaa <cambio+0x4>
		status++;
  ae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  b2:	8f 5f       	subi	r24, 0xFF	; 255
  b4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		if(status>1){status=0;}
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	10 f0       	brcs	.+4      	; 0xc0 <cambio+0x1a>
  bc:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
  c0:	08 95       	ret

000000c2 <retardo_ms>:
		return;
	}
	
}

void retardo_ms(void){
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
	for(int i=0;i<=500;i++){
  c6:	c0 e0       	ldi	r28, 0x00	; 0
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	09 c0       	rjmp	.+18     	; 0xde <retardo_ms+0x1c>
		cambio();
  cc:	0e 94 53 00 	call	0xa6	; 0xa6 <cambio>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	8f e9       	ldi	r24, 0x9F	; 159
  d2:	9f e0       	ldi	r25, 0x0F	; 15
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <retardo_ms+0x12>
  d8:	00 c0       	rjmp	.+0      	; 0xda <retardo_ms+0x18>
  da:	00 00       	nop
	}
	
}

void retardo_ms(void){
	for(int i=0;i<=500;i++){
  dc:	21 96       	adiw	r28, 0x01	; 1
  de:	c5 3f       	cpi	r28, 0xF5	; 245
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	d9 07       	cpc	r29, r25
  e4:	9c f3       	brlt	.-26     	; 0xcc <retardo_ms+0xa>
		cambio();
		_delay_ms(1);
	}
	
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <main>:
void cambio(void);
void retardo_ms(void);

int main(void)
{
    DDRD= 0xff; //puerto D salida
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(1<<PINB0); //pin B0 entrada 
  f0:	84 b1       	in	r24, 0x04	; 4
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	84 b9       	out	0x04, r24	; 4
	PORTD=deco_ac[contador];
  f6:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <contador>
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	e0 50       	subi	r30, 0x00	; 0
  fe:	ff 4f       	sbci	r31, 0xFF	; 255
 100:	80 81       	ld	r24, Z
 102:	8b b9       	out	0x0b, r24	; 11
    while (1) 
    {
		
		if(status==0){
 104:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 108:	81 11       	cpse	r24, r1
 10a:	2b c0       	rjmp	.+86     	; 0x162 <main+0x76>
			if(getstatusb0() != 0){
 10c:	18 9b       	sbis	0x03, 0	; 3
 10e:	29 c0       	rjmp	.+82     	; 0x162 <main+0x76>
				while(getstatusb0()!=0);
 110:	18 99       	sbic	0x03, 0	; 3
 112:	fe cf       	rjmp	.-4      	; 0x110 <main+0x24>
				cambio();
 114:	0e 94 53 00 	call	0xa6	; 0xa6 <cambio>
				contador++;
 118:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <contador>
 11c:	8f 5f       	subi	r24, 0xFF	; 255
 11e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <contador>
				if(contador>9)contador=0;
 122:	8a 30       	cpi	r24, 0x0A	; 10
 124:	10 f0       	brcs	.+4      	; 0x12a <main+0x3e>
 126:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <contador>
				PORTD=deco_ac[contador];
 12a:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <contador>
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	e0 50       	subi	r30, 0x00	; 0
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	80 81       	ld	r24, Z
 136:	8b b9       	out	0x0b, r24	; 11
 138:	14 c0       	rjmp	.+40     	; 0x162 <main+0x76>
				}
		}
		while(status==1){
			cambio();
 13a:	0e 94 53 00 	call	0xa6	; 0xa6 <cambio>
			contador++;
 13e:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <contador>
 142:	ef 5f       	subi	r30, 0xFF	; 255
 144:	e0 93 0b 01 	sts	0x010B, r30	; 0x80010b <contador>
			PORTD=deco_ac[contador];
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	e0 50       	subi	r30, 0x00	; 0
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	80 81       	ld	r24, Z
 150:	8b b9       	out	0x0b, r24	; 11
			retardo_ms();
 152:	0e 94 61 00 	call	0xc2	; 0xc2 <retardo_ms>
			if(contador>9)contador=0;
 156:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <contador>
 15a:	8a 30       	cpi	r24, 0x0A	; 10
 15c:	10 f0       	brcs	.+4      	; 0x162 <main+0x76>
 15e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <contador>
				contador++;
				if(contador>9)contador=0;
				PORTD=deco_ac[contador];
				}
		}
		while(status==1){
 162:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	41 f3       	breq	.-48     	; 0x13a <main+0x4e>
			contador++;
			PORTD=deco_ac[contador];
			retardo_ms();
			if(contador>9)contador=0;
		}
		cambio();	
 16a:	0e 94 53 00 	call	0xa6	; 0xa6 <cambio>
		
	}
 16e:	ca cf       	rjmp	.-108    	; 0x104 <main+0x18>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
