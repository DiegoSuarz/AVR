
DISPLAY_7SEG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000028c  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010c  0080010c  0000032c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008af  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006be  00000000  00000000  00000c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000346  00000000  00000000  00001331  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001678  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042a  00000000  00000000  000016ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000120  00000000  00000000  00001ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001bf6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  9e:	0c 94 44 01 	jmp	0x288	; 0x288 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <multiplexar>:
	}
}

void multiplexar(){
	
	setD1();
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	85 b9       	out	0x05, r24	; 5
	PORTD=deco_ac[miles];
  aa:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <miles>
  ae:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <miles+0x1>
  b2:	ee 5f       	subi	r30, 0xFE	; 254
  b4:	fe 4f       	sbci	r31, 0xFE	; 254
  b6:	80 81       	ld	r24, Z
  b8:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	89 ef       	ldi	r24, 0xF9	; 249
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <multiplexar+0x1a>
  c8:	00 c0       	rjmp	.+0      	; 0xca <multiplexar+0x24>
  ca:	00 00       	nop
	_delay_ms(tiempo);
	
	setD2();
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	85 b9       	out	0x05, r24	; 5
	PORTD=deco_ac[centenas];
  d0:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <centenas>
  d4:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <centenas+0x1>
  d8:	ee 5f       	subi	r30, 0xFE	; 254
  da:	fe 4f       	sbci	r31, 0xFE	; 254
  dc:	80 81       	ld	r24, Z
  de:	8b b9       	out	0x0b, r24	; 11
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	89 ef       	ldi	r24, 0xF9	; 249
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <multiplexar+0x40>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <multiplexar+0x4a>
  f0:	00 00       	nop
	_delay_ms(tiempo);
	
	setD3();
  f2:	84 e0       	ldi	r24, 0x04	; 4
  f4:	85 b9       	out	0x05, r24	; 5
	PORTD=deco_ac[decenas];
  f6:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__data_end>
  fa:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <__data_end+0x1>
  fe:	ee 5f       	subi	r30, 0xFE	; 254
 100:	fe 4f       	sbci	r31, 0xFE	; 254
 102:	80 81       	ld	r24, Z
 104:	8b b9       	out	0x0b, r24	; 11
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	89 ef       	ldi	r24, 0xF9	; 249
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <multiplexar+0x66>
 114:	00 c0       	rjmp	.+0      	; 0x116 <multiplexar+0x70>
 116:	00 00       	nop
	_delay_ms(tiempo);
	
	
	setD4();
 118:	88 e0       	ldi	r24, 0x08	; 8
 11a:	85 b9       	out	0x05, r24	; 5
	PORTD=deco_ac[unidades];
 11c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <unidades>
 120:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <unidades+0x1>
 124:	ee 5f       	subi	r30, 0xFE	; 254
 126:	fe 4f       	sbci	r31, 0xFE	; 254
 128:	80 81       	ld	r24, Z
 12a:	8b b9       	out	0x0b, r24	; 11
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	89 ef       	ldi	r24, 0xF9	; 249
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <multiplexar+0x8c>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <multiplexar+0x96>
 13c:	00 00       	nop
 13e:	08 95       	ret

00000140 <main>:

void multiplexar();

int main(void)
{
    DDRD=0xff;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	8a b9       	out	0x0a, r24	; 10
	DDRB |=(1<<PINB0)|(1<<PINB1)|(1<<PINB2)|(1<<PINB3);
 144:	84 b1       	in	r24, 0x04	; 4
 146:	8f 60       	ori	r24, 0x0F	; 15
 148:	84 b9       	out	0x04, r24	; 4
    DDRB &=~((1<<PINB4)|(1<<PINB5));
 14a:	84 b1       	in	r24, 0x04	; 4
 14c:	8f 7c       	andi	r24, 0xCF	; 207
 14e:	84 b9       	out	0x04, r24	; 4
	
	
	while (1) 
    {
		if(getStatusB4() == 0){
 150:	1c 9b       	sbis	0x03, 4	; 3
 152:	03 c0       	rjmp	.+6      	; 0x15a <main+0x1a>
 154:	16 c0       	rjmp	.+44     	; 0x182 <main+0x42>
			while(getStatusB4() !=0) multiplexar();	
 156:	0e 94 53 00 	call	0xa6	; 0xa6 <multiplexar>
 15a:	1c 99       	sbic	0x03, 4	; 3
 15c:	fc cf       	rjmp	.-8      	; 0x156 <main+0x16>
			contador++;
 15e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 162:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if(contador>9999)contador=0;
 170:	80 31       	cpi	r24, 0x10	; 16
 172:	97 42       	sbci	r25, 0x27	; 39
 174:	20 f0       	brcs	.+8      	; 0x17e <main+0x3e>
 176:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			multiplexar();
 17e:	0e 94 53 00 	call	0xa6	; 0xa6 <multiplexar>
		}
		
		if(getStatusB5() == 0){
 182:	1d 9b       	sbis	0x03, 5	; 3
 184:	03 c0       	rjmp	.+6      	; 0x18c <main+0x4c>
 186:	0f c0       	rjmp	.+30     	; 0x1a6 <main+0x66>
			while(getStatusB5() !=0) multiplexar();
 188:	0e 94 53 00 	call	0xa6	; 0xa6 <multiplexar>
 18c:	1d 99       	sbic	0x03, 5	; 3
 18e:	fc cf       	rjmp	.-8      	; 0x188 <main+0x48>
			contador--;
 190:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 194:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if(contador<0)contador=9999;
			multiplexar();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <multiplexar>
		}
		miles=contador/1000;
 1a6:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1aa:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ae:	9a 01       	movw	r18, r20
 1b0:	36 95       	lsr	r19
 1b2:	27 95       	ror	r18
 1b4:	36 95       	lsr	r19
 1b6:	27 95       	ror	r18
 1b8:	36 95       	lsr	r19
 1ba:	27 95       	ror	r18
 1bc:	a5 ec       	ldi	r26, 0xC5	; 197
 1be:	b0 e2       	ldi	r27, 0x20	; 32
 1c0:	0e 94 35 01 	call	0x26a	; 0x26a <__umulhisi3>
 1c4:	92 95       	swap	r25
 1c6:	82 95       	swap	r24
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	89 27       	eor	r24, r25
 1cc:	9f 70       	andi	r25, 0x0F	; 15
 1ce:	89 27       	eor	r24, r25
 1d0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <miles+0x1>
 1d4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <miles>
		residuo=contador%1000;
 1d8:	68 ee       	ldi	r22, 0xE8	; 232
 1da:	73 e0       	ldi	r23, 0x03	; 3
 1dc:	86 9f       	mul	r24, r22
 1de:	90 01       	movw	r18, r0
 1e0:	87 9f       	mul	r24, r23
 1e2:	30 0d       	add	r19, r0
 1e4:	96 9f       	mul	r25, r22
 1e6:	30 0d       	add	r19, r0
 1e8:	11 24       	eor	r1, r1
 1ea:	42 1b       	sub	r20, r18
 1ec:	53 0b       	sbc	r21, r19
		centenas=residuo/100;
 1ee:	9a 01       	movw	r18, r20
 1f0:	36 95       	lsr	r19
 1f2:	27 95       	ror	r18
 1f4:	36 95       	lsr	r19
 1f6:	27 95       	ror	r18
 1f8:	ab e7       	ldi	r26, 0x7B	; 123
 1fa:	b4 e1       	ldi	r27, 0x14	; 20
 1fc:	0e 94 35 01 	call	0x26a	; 0x26a <__umulhisi3>
 200:	96 95       	lsr	r25
 202:	87 95       	ror	r24
 204:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <centenas+0x1>
 208:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <centenas>
		residuo=residuo%100;
 20c:	64 e6       	ldi	r22, 0x64	; 100
 20e:	68 9f       	mul	r22, r24
 210:	90 01       	movw	r18, r0
 212:	69 9f       	mul	r22, r25
 214:	30 0d       	add	r19, r0
 216:	11 24       	eor	r1, r1
 218:	42 1b       	sub	r20, r18
 21a:	53 0b       	sbc	r21, r19
 21c:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <residuo+0x1>
 220:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <residuo>
		decenas=residuo/10;
 224:	9a 01       	movw	r18, r20
 226:	ad ec       	ldi	r26, 0xCD	; 205
 228:	bc ec       	ldi	r27, 0xCC	; 204
 22a:	0e 94 35 01 	call	0x26a	; 0x26a <__umulhisi3>
 22e:	96 95       	lsr	r25
 230:	87 95       	ror	r24
 232:	96 95       	lsr	r25
 234:	87 95       	ror	r24
 236:	96 95       	lsr	r25
 238:	87 95       	ror	r24
 23a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 23e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		unidades=residuo%10;
 242:	9c 01       	movw	r18, r24
 244:	22 0f       	add	r18, r18
 246:	33 1f       	adc	r19, r19
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	82 0f       	add	r24, r18
 256:	93 1f       	adc	r25, r19
 258:	48 1b       	sub	r20, r24
 25a:	59 0b       	sbc	r21, r25
 25c:	50 93 15 01 	sts	0x0115, r21	; 0x800115 <unidades+0x1>
 260:	40 93 14 01 	sts	0x0114, r20	; 0x800114 <unidades>
		multiplexar();	
 264:	0e 94 53 00 	call	0xa6	; 0xa6 <multiplexar>
	}
 268:	73 cf       	rjmp	.-282    	; 0x150 <main+0x10>

0000026a <__umulhisi3>:
 26a:	a2 9f       	mul	r26, r18
 26c:	b0 01       	movw	r22, r0
 26e:	b3 9f       	mul	r27, r19
 270:	c0 01       	movw	r24, r0
 272:	a3 9f       	mul	r26, r19
 274:	70 0d       	add	r23, r0
 276:	81 1d       	adc	r24, r1
 278:	11 24       	eor	r1, r1
 27a:	91 1d       	adc	r25, r1
 27c:	b2 9f       	mul	r27, r18
 27e:	70 0d       	add	r23, r0
 280:	81 1d       	adc	r24, r1
 282:	11 24       	eor	r1, r1
 284:	91 1d       	adc	r25, r1
 286:	08 95       	ret

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
