
INTERRUPCION.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000164  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000083d  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ae  00000000  00000000  00000a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000316  00000000  00000000  0000113b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001454  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e5  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b1  00000000  00000000  00001881  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/interrupt.h>


int main(void)
{
	DDRB |= ((1<<PINB0)|(1<<PINB1)|(1<<PINB2)); //pines salida
  80:	84 b1       	in	r24, 0x04	; 4
  82:	87 60       	ori	r24, 0x07	; 7
  84:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PINB0); // pin salida
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<PINB2);
  8c:	8a b1       	in	r24, 0x0a	; 10
  8e:	8b 7f       	andi	r24, 0xFB	; 251
  90:	8a b9       	out	0x0a, r24	; 10
	
	EICRA |= (1<< ISC01); //permite controlar la sensibilidad (si la interrupcion externa es flanco de subida o de bajada) (flancos de bajada en este caso)
  92:	e9 e6       	ldi	r30, 0x69	; 105
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	80 83       	st	Z, r24
	EICRA &= ~(1<< ISC00); 
  9c:	80 81       	ld	r24, Z
  9e:	8e 7f       	andi	r24, 0xFE	; 254
  a0:	80 83       	st	Z, r24
	
	EIMSK |= (1<<INT0); // habilitar la interrupcion externa 0
  a2:	8d b3       	in	r24, 0x1d	; 29
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	8d bb       	out	0x1d, r24	; 29
	
	sei();  //funcion para habilitar las interrupciones globales
  a8:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
		PORTB |= (1<<PINB0);
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	89 e6       	ldi	r24, 0x69	; 105
  b4:	98 e1       	ldi	r25, 0x18	; 24
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x36>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x40>
  c0:	00 00       	nop
		_delay_ms(500);
		PORTB |= (1<<PINB1);
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	89 e6       	ldi	r24, 0x69	; 105
  cc:	98 e1       	ldi	r25, 0x18	; 24
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x4e>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x58>
  d8:	00 00       	nop
		_delay_ms(500);
		PORTB |= (1<<PINB2);
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	85 b9       	out	0x05, r24	; 5
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	89 e6       	ldi	r24, 0x69	; 105
  e4:	98 e1       	ldi	r25, 0x18	; 24
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x66>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x70>
  f0:	00 00       	nop
		_delay_ms(500);
		
		PORTB &= ~(1<<PINB0);
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	8e 7f       	andi	r24, 0xFE	; 254
  f6:	85 b9       	out	0x05, r24	; 5
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	89 e6       	ldi	r24, 0x69	; 105
  fc:	98 e1       	ldi	r25, 0x18	; 24
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x7e>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x88>
 108:	00 00       	nop
		_delay_ms(500);
		PORTB &= ~(1<<PINB1);
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	8d 7f       	andi	r24, 0xFD	; 253
 10e:	85 b9       	out	0x05, r24	; 5
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	89 e6       	ldi	r24, 0x69	; 105
 114:	98 e1       	ldi	r25, 0x18	; 24
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x96>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0xa0>
 120:	00 00       	nop
		_delay_ms(500);
		PORTB &= ~(1<<PINB2);
 122:	85 b1       	in	r24, 0x05	; 5
 124:	8b 7f       	andi	r24, 0xFB	; 251
 126:	85 b9       	out	0x05, r24	; 5
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	89 e6       	ldi	r24, 0x69	; 105
 12c:	98 e1       	ldi	r25, 0x18	; 24
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0xae>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0xb8>
 138:	00 00       	nop
 13a:	b7 cf       	rjmp	.-146    	; 0xaa <main+0x2a>

0000013c <__vector_1>:
		_delay_ms(500);
		
	}
}

ISR(INT0_vect){
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
	PORTD ^= (1<<PIND0);
 14a:	9b b1       	in	r25, 0x0b	; 11
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	89 27       	eor	r24, r25
 150:	8b b9       	out	0x0b, r24	; 11
	
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
