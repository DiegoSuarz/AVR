
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000022e  000002c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010e  0080010e  000002d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001004  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000868  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006cd  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00002334  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fa  00000000  00000000  00002490  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d4  00000000  00000000  0000298a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002f5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <main>
  9e:	0c 94 15 01 	jmp	0x22a	; 0x22a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_write_nibble>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	80 fd       	sbrc	r24, 0
  a8:	04 c0       	rjmp	.+8      	; 0xb2 <_write_nibble+0xc>
  aa:	9b b1       	in	r25, 0x0b	; 11
  ac:	9b 7f       	andi	r25, 0xFB	; 251
  ae:	9b b9       	out	0x0b, r25	; 11
  b0:	03 c0       	rjmp	.+6      	; 0xb8 <_write_nibble+0x12>
  b2:	9b b1       	in	r25, 0x0b	; 11
  b4:	94 60       	ori	r25, 0x04	; 4
  b6:	9b b9       	out	0x0b, r25	; 11
  b8:	81 fd       	sbrc	r24, 1
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <_write_nibble+0x1e>
  bc:	9b b1       	in	r25, 0x0b	; 11
  be:	97 7f       	andi	r25, 0xF7	; 247
  c0:	9b b9       	out	0x0b, r25	; 11
  c2:	03 c0       	rjmp	.+6      	; 0xca <_write_nibble+0x24>
  c4:	9b b1       	in	r25, 0x0b	; 11
  c6:	98 60       	ori	r25, 0x08	; 8
  c8:	9b b9       	out	0x0b, r25	; 11
  ca:	82 fd       	sbrc	r24, 2
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <_write_nibble+0x30>
  ce:	9b b1       	in	r25, 0x0b	; 11
  d0:	9f 7e       	andi	r25, 0xEF	; 239
  d2:	9b b9       	out	0x0b, r25	; 11
  d4:	03 c0       	rjmp	.+6      	; 0xdc <_write_nibble+0x36>
  d6:	9b b1       	in	r25, 0x0b	; 11
  d8:	90 61       	ori	r25, 0x10	; 16
  da:	9b b9       	out	0x0b, r25	; 11
  dc:	83 fd       	sbrc	r24, 3
  de:	04 c0       	rjmp	.+8      	; 0xe8 <_write_nibble+0x42>
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	8f 7d       	andi	r24, 0xDF	; 223
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	03 c0       	rjmp	.+6      	; 0xee <_write_nibble+0x48>
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	8b b9       	out	0x0b, r24	; 11
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	8d 7f       	andi	r24, 0xFD	; 253
  f2:	8b b9       	out	0x0b, r24	; 11
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	8b b9       	out	0x0b, r24	; 11
  fa:	8b b1       	in	r24, 0x0b	; 11
  fc:	8d 7f       	andi	r24, 0xFD	; 253
  fe:	8b b9       	out	0x0b, r24	; 11
 100:	87 e5       	ldi	r24, 0x57	; 87
 102:	92 e0       	ldi	r25, 0x02	; 2
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <_write_nibble+0x5e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <_write_nibble+0x64>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <_send_byte>:
 10e:	cf 93       	push	r28
 110:	c8 2f       	mov	r28, r24
 112:	66 23       	and	r22, r22
 114:	19 f0       	breq	.+6      	; 0x11c <_send_byte+0xe>
 116:	61 30       	cpi	r22, 0x01	; 1
 118:	29 f0       	breq	.+10     	; 0x124 <_send_byte+0x16>
 11a:	07 c0       	rjmp	.+14     	; 0x12a <_send_byte+0x1c>
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	8e 7f       	andi	r24, 0xFE	; 254
 120:	8b b9       	out	0x0b, r24	; 11
 122:	03 c0       	rjmp	.+6      	; 0x12a <_send_byte+0x1c>
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	81 60       	ori	r24, 0x01	; 1
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	8c 2f       	mov	r24, r28
 12c:	82 95       	swap	r24
 12e:	8f 70       	andi	r24, 0x0F	; 15
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <_write_nibble>
 134:	8c 2f       	mov	r24, r28
 136:	8f 70       	andi	r24, 0x0F	; 15
 138:	0e 94 53 00 	call	0xa6	; 0xa6 <_write_nibble>
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <lcd_write>:
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	0e 94 87 00 	call	0x10e	; 0x10e <_send_byte>
 146:	08 95       	ret

00000148 <lcd_command>:
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	0e 94 87 00 	call	0x10e	; 0x10e <_send_byte>
 14e:	08 95       	ret

00000150 <lcd_init>:
 150:	8a b1       	in	r24, 0x0a	; 10
 152:	8f 63       	ori	r24, 0x3F	; 63
 154:	8a b9       	out	0x0a, r24	; 10
 156:	8b b1       	in	r24, 0x0b	; 11
 158:	80 7c       	andi	r24, 0xC0	; 192
 15a:	8b b9       	out	0x0b, r24	; 11
 15c:	8f e2       	ldi	r24, 0x2F	; 47
 15e:	95 e7       	ldi	r25, 0x75	; 117
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_init+0x10>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_init+0x16>
 166:	00 00       	nop
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	0e 94 53 00 	call	0xa6	; 0xa6 <_write_nibble>
 16e:	87 e0       	ldi	r24, 0x07	; 7
 170:	90 e2       	ldi	r25, 0x20	; 32
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_init+0x22>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_init+0x28>
 178:	00 00       	nop
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	0e 94 53 00 	call	0xa6	; 0xa6 <_write_nibble>
 180:	87 ec       	ldi	r24, 0xC7	; 199
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_init+0x34>
 188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_init+0x3a>
 18a:	00 00       	nop
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <_write_nibble>
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 53 00 	call	0xa6	; 0xa6 <_write_nibble>
 198:	88 e2       	ldi	r24, 0x28	; 40
 19a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 19e:	8e e0       	ldi	r24, 0x0E	; 14
 1a0:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 1a4:	08 95       	ret

000001a6 <lcd_string>:
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	ec 01       	movw	r28, r24
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <lcd_string+0xe>
 1ae:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_write>
 1b2:	21 96       	adiw	r28, 0x01	; 1
 1b4:	88 81       	ld	r24, Y
 1b6:	81 11       	cpse	r24, r1
 1b8:	fa cf       	rjmp	.-12     	; 0x1ae <lcd_string+0x8>
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <lcd_enable_cursor>:
	_delay_us(40);
}


void lcd_enable_cursor(void){
	_lcd_params |= _LCD_cursorOn;
 1c0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1c4:	98 2f       	mov	r25, r24
 1c6:	92 60       	ori	r25, 0x02	; 2
 1c8:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <__data_end>
	lcd_command(_LCD_displayControl |_lcd_params);
 1cc:	8a 60       	ori	r24, 0x0A	; 10
 1ce:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 1d2:	8a e6       	ldi	r24, 0x6A	; 106
 1d4:	8a 95       	dec	r24
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_enable_cursor+0x14>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_enable_cursor+0x1a>
 1da:	08 95       	ret

000001dc <lcd_disable_cursor>:
	_delay_us(40);
}
void lcd_disable_cursor(void){
	//_lcd_params &= ~_LCD_cursorOn;
	lcd_command(_LCD_displayControl |_LCD_cursorOff);
 1dc:	88 e0       	ldi	r24, 0x08	; 8
 1de:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 1e2:	8a e6       	ldi	r24, 0x6A	; 106
 1e4:	8a 95       	dec	r24
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_disable_cursor+0x8>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_disable_cursor+0xe>
 1ea:	08 95       	ret

000001ec <main>:
#include "LCD/LCD_LIB.h"


int main(void)
{
	DDRD = 0xFF;
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	8a b9       	out	0x0a, r24	; 10
	lcd_init();
 1f0:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_init>
	//lcd_string("12345678");
	//lcd_set_cursor(2,5);
	//lcd_string("Hola mundo");
	//lcd_set_cursor(3,1);
	//lcd_printf("temp: %d  hum=%d",25,24);
	lcd_string("hola a todos");
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	2f ef       	ldi	r18, 0xFF	; 255
 1fe:	83 ed       	ldi	r24, 0xD3	; 211
 200:	90 e3       	ldi	r25, 0x30	; 48
 202:	21 50       	subi	r18, 0x01	; 1
 204:	80 40       	sbci	r24, 0x00	; 0
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <main+0x16>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0x20>
 20c:	00 00       	nop
	_delay_ms(2000);
	//lcd_clear();
	//lcd_return_home();
	
	lcd_disable_cursor();
 20e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_disable_cursor>
 212:	2f ef       	ldi	r18, 0xFF	; 255
 214:	89 e6       	ldi	r24, 0x69	; 105
 216:	98 e1       	ldi	r25, 0x18	; 24
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <main+0x2c>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x36>
 222:	00 00       	nop
	_delay_ms(1000);
	lcd_enable_cursor();
 224:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_enable_cursor>
 228:	ff cf       	rjmp	.-2      	; 0x228 <main+0x3c>

0000022a <_exit>:
 22a:	f8 94       	cli

0000022c <__stop_program>:
 22c:	ff cf       	rjmp	.-2      	; 0x22c <__stop_program>
