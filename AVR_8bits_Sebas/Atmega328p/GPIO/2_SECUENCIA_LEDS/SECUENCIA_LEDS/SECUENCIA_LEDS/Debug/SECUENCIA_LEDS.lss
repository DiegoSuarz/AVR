
SECUENCIA_LEDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000002f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a02  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ad  00000000  00000000  00000dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f5  00000000  00000000  0000156f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042d  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015c  00000000  00000000  00001f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002089  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 3c 01 	jmp	0x278	; 0x278 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:


uint8_t sec=0,modo=MANUAL, seleccion=0;
int main(void)
{
	DDRD |=((1<<PIND0)|(1<<PIND1)); //pind0,pind1 configurados como salidas digitales
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	83 60       	ori	r24, 0x03	; 3
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~((1<<PINB0)|(1<<PINB1)); //pinb0, pinb2 configurados como entradas digitales
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	8c 7f       	andi	r24, 0xFC	; 252
  b0:	84 b9       	out	0x04, r24	; 4
	
	PORTD=0x00; //limpiamos el puerto
  b2:	1b b8       	out	0x0b, r1	; 11
    while (1) 
    {
		if(modo==MANUAL){
  b4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <modo>
  b8:	81 11       	cpse	r24, r1
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <main+0xe>
			switch(sec){
  bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <sec>
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	39 f0       	breq	.+14     	; 0xd2 <main+0x2c>
  c4:	18 f0       	brcs	.+6      	; 0xcc <main+0x26>
  c6:	82 30       	cpi	r24, 0x02	; 2
  c8:	39 f0       	breq	.+14     	; 0xd8 <main+0x32>
  ca:	08 c0       	rjmp	.+16     	; 0xdc <main+0x36>
				case 0: secuenciaA();break;
  cc:	0e 94 c7 00 	call	0x18e	; 0x18e <secuenciaA>
  d0:	05 c0       	rjmp	.+10     	; 0xdc <main+0x36>
				case 1: secuenciaB();break;
  d2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <secuenciaB>
  d6:	02 c0       	rjmp	.+4      	; 0xdc <main+0x36>
				case 2: secuenciaC();break;
  d8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <secuenciaC>
			}
			if(readpinD0 != 0){
  dc:	18 9b       	sbis	0x03, 0	; 3
  de:	26 c0       	rjmp	.+76     	; 0x12c <main+0x86>
				while(readpinD0 !=0); //esperar mientras esta presionado el pulsador
  e0:	18 99       	sbic	0x03, 0	; 3
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <main+0x3a>
				sec++;
  e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <sec>
  e8:	8f 5f       	subi	r24, 0xFF	; 255
  ea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <sec>
				if(sec>2)
  ee:	83 30       	cpi	r24, 0x03	; 3
  f0:	e8 f0       	brcs	.+58     	; 0x12c <main+0x86>
					sec=0;
  f2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <sec>
  f6:	1a c0       	rjmp	.+52     	; 0x12c <main+0x86>
			}
		
		while(modo==AUTOMATICO){
				switch(sec++){
  f8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <sec>
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	98 0f       	add	r25, r24
 100:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <sec>
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	39 f0       	breq	.+14     	; 0x116 <main+0x70>
 108:	18 f0       	brcs	.+6      	; 0x110 <main+0x6a>
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	39 f0       	breq	.+14     	; 0x11c <main+0x76>
 10e:	08 c0       	rjmp	.+16     	; 0x120 <main+0x7a>
					case 0: secuenciaA();break;
 110:	0e 94 c7 00 	call	0x18e	; 0x18e <secuenciaA>
 114:	05 c0       	rjmp	.+10     	; 0x120 <main+0x7a>
					case 1: secuenciaB();break;
 116:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <secuenciaB>
 11a:	02 c0       	rjmp	.+4      	; 0x120 <main+0x7a>
					case 2: secuenciaC();break;
 11c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <secuenciaC>
				}
				if(sec>2)sec=0;	
 120:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <sec>
 124:	83 30       	cpi	r24, 0x03	; 3
 126:	10 f0       	brcs	.+4      	; 0x12c <main+0x86>
 128:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <sec>
				sec++;
				if(sec>2)
					sec=0;
			}
		
		while(modo==AUTOMATICO){
 12c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <modo>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	11 f3       	breq	.-60     	; 0xf8 <main+0x52>
 134:	bf cf       	rjmp	.-130    	; 0xb4 <main+0xe>

00000136 <estado>:
	}
}

void estado(void){
	uint8_t a;
	if(readpinD1 == 0){
 136:	19 99       	sbic	0x03, 1	; 3
 138:	14 c0       	rjmp	.+40     	; 0x162 <estado+0x2c>
		a=sec;
		while(readpinD1 == 0); 
 13a:	19 9b       	sbis	0x03, 1	; 3
 13c:	fe cf       	rjmp	.-4      	; 0x13a <estado+0x4>
		seleccion++;
 13e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(seleccion==1){
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	19 f4       	brne	.+6      	; 0x152 <estado+0x1c>
			modo=AUTOMATICO;
 14c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <modo>
 150:	02 c0       	rjmp	.+4      	; 0x156 <estado+0x20>
			sec=a;
		}else{
			modo=MANUAL;
 152:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <modo>
			sec=a;
		}
		if(seleccion>1)seleccion=0;
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15a:	82 30       	cpi	r24, 0x02	; 2
 15c:	10 f0       	brcs	.+4      	; 0x162 <estado+0x2c>
 15e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 162:	08 95       	ret

00000164 <retardo_ms>:
	}
	
}


void retardo_ms(uint8_t tiempo){
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	d8 2f       	mov	r29, r24
	for(uint8_t i=0;i<=tiempo;i++){
 16a:	c0 e0       	ldi	r28, 0x00	; 0
 16c:	0b c0       	rjmp	.+22     	; 0x184 <retardo_ms+0x20>
		estado();
 16e:	0e 94 9b 00 	call	0x136	; 0x136 <estado>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	8f e9       	ldi	r24, 0x9F	; 159
 174:	9f e0       	ldi	r25, 0x0F	; 15
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <retardo_ms+0x12>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <retardo_ms+0x18>
 17c:	00 00       	nop
		_delay_ms(1);
		if(readpinD0 != 0){
 17e:	18 99       	sbic	0x03, 0	; 3
 180:	03 c0       	rjmp	.+6      	; 0x188 <retardo_ms+0x24>
	
}


void retardo_ms(uint8_t tiempo){
	for(uint8_t i=0;i<=tiempo;i++){
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	dc 17       	cp	r29, r28
 186:	98 f7       	brcc	.-26     	; 0x16e <retardo_ms+0xa>
		_delay_ms(1);
		if(readpinD0 != 0){
			return;
		}
	}
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <secuenciaA>:
extern uint8_t modo,sec,seleccion;
 

void secuenciaA(void){
	
	PORTD=0x0F;
 18e:	8f e0       	ldi	r24, 0x0F	; 15
 190:	8b b9       	out	0x0b, r24	; 11
	if(readpinD0 != 0){
 192:	18 99       	sbic	0x03, 0	; 3
 194:	0c c0       	rjmp	.+24     	; 0x1ae <secuenciaA+0x20>
		return;
	}
	estado();
 196:	0e 94 9b 00 	call	0x136	; 0x136 <estado>
	retardo_ms(tiempo);				
 19a:	88 ec       	ldi	r24, 0xC8	; 200
 19c:	0e 94 b2 00 	call	0x164	; 0x164 <retardo_ms>
	PORTD=0xF0;
 1a0:	80 ef       	ldi	r24, 0xF0	; 240
 1a2:	8b b9       	out	0x0b, r24	; 11
	retardo_ms(tiempo);
 1a4:	88 ec       	ldi	r24, 0xC8	; 200
 1a6:	0e 94 b2 00 	call	0x164	; 0x164 <retardo_ms>
	estado();
 1aa:	0e 94 9b 00 	call	0x136	; 0x136 <estado>
 1ae:	08 95       	ret

000001b0 <secuenciaB>:
}
void secuenciaB(void){
	PORTD=0b10101010;
 1b0:	8a ea       	ldi	r24, 0xAA	; 170
 1b2:	8b b9       	out	0x0b, r24	; 11
	estado();
 1b4:	0e 94 9b 00 	call	0x136	; 0x136 <estado>
	if(readpinD0 != 0){
 1b8:	18 99       	sbic	0x03, 0	; 3
 1ba:	12 c0       	rjmp	.+36     	; 0x1e0 <secuenciaB+0x30>
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	83 ec       	ldi	r24, 0xC3	; 195
 1c0:	99 e0       	ldi	r25, 0x09	; 9
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <secuenciaB+0x12>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <secuenciaB+0x1c>
 1cc:	00 00       	nop
		return;
	}
	_delay_ms(tiempo);
	
	PORTD=0b01010101;
 1ce:	85 e5       	ldi	r24, 0x55	; 85
 1d0:	8b b9       	out	0x0b, r24	; 11
	estado();
 1d2:	0e 94 9b 00 	call	0x136	; 0x136 <estado>
	if(readpinD0 != 0){
 1d6:	18 99       	sbic	0x03, 0	; 3
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <secuenciaB+0x30>
		return;
	}
	retardo_ms(tiempo);
 1da:	88 ec       	ldi	r24, 0xC8	; 200
 1dc:	0e 94 b2 00 	call	0x164	; 0x164 <retardo_ms>
 1e0:	08 95       	ret

000001e2 <secuenciaC>:
	
}

void secuenciaC(void){
 1e2:	cf 93       	push	r28
	
	for(char i=0;i<=3;i++){
 1e4:	c0 e0       	ldi	r28, 0x00	; 0
 1e6:	1e c0       	rjmp	.+60     	; 0x224 <secuenciaC+0x42>
		PORTD|=((1<<i)|(1<<(7-i)));
 1e8:	2b b1       	in	r18, 0x0b	; 11
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	bc 01       	movw	r22, r24
 1f0:	0c 2e       	mov	r0, r28
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <secuenciaC+0x16>
 1f4:	66 0f       	add	r22, r22
 1f6:	77 1f       	adc	r23, r23
 1f8:	0a 94       	dec	r0
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <secuenciaC+0x12>
 1fc:	47 e0       	ldi	r20, 0x07	; 7
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	4c 1b       	sub	r20, r28
 202:	51 09       	sbc	r21, r1
 204:	02 c0       	rjmp	.+4      	; 0x20a <secuenciaC+0x28>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	4a 95       	dec	r20
 20c:	e2 f7       	brpl	.-8      	; 0x206 <secuenciaC+0x24>
 20e:	86 2b       	or	r24, r22
 210:	82 2b       	or	r24, r18
 212:	8b b9       	out	0x0b, r24	; 11
		estado();
 214:	0e 94 9b 00 	call	0x136	; 0x136 <estado>
		if(readpinD0 != 0){
 218:	18 99       	sbic	0x03, 0	; 3
 21a:	2c c0       	rjmp	.+88     	; 0x274 <secuenciaC+0x92>
			return;
		}
		
	retardo_ms(tiempo);
 21c:	88 ec       	ldi	r24, 0xC8	; 200
 21e:	0e 94 b2 00 	call	0x164	; 0x164 <retardo_ms>
	
}

void secuenciaC(void){
	
	for(char i=0;i<=3;i++){
 222:	cf 5f       	subi	r28, 0xFF	; 255
 224:	c4 30       	cpi	r28, 0x04	; 4
 226:	00 f3       	brcs	.-64     	; 0x1e8 <secuenciaC+0x6>
 228:	c0 e0       	ldi	r28, 0x00	; 0
 22a:	22 c0       	rjmp	.+68     	; 0x270 <secuenciaC+0x8e>
		
	retardo_ms(tiempo);
	}
	
	for(char i=0;i<=3;i++){
		PORTD &=~((1<<(3-i))|(1<<(4+i)));
 22c:	4b b1       	in	r20, 0x0b	; 11
 22e:	2c 2f       	mov	r18, r28
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	63 e0       	ldi	r22, 0x03	; 3
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	62 1b       	sub	r22, r18
 238:	73 0b       	sbc	r23, r19
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	fc 01       	movw	r30, r24
 240:	02 c0       	rjmp	.+4      	; 0x246 <secuenciaC+0x64>
 242:	ee 0f       	add	r30, r30
 244:	ff 1f       	adc	r31, r31
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <secuenciaC+0x60>
 24a:	2c 5f       	subi	r18, 0xFC	; 252
 24c:	3f 4f       	sbci	r19, 0xFF	; 255
 24e:	02 c0       	rjmp	.+4      	; 0x254 <secuenciaC+0x72>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	2a 95       	dec	r18
 256:	e2 f7       	brpl	.-8      	; 0x250 <secuenciaC+0x6e>
 258:	8e 2b       	or	r24, r30
 25a:	80 95       	com	r24
 25c:	84 23       	and	r24, r20
 25e:	8b b9       	out	0x0b, r24	; 11
		estado();
 260:	0e 94 9b 00 	call	0x136	; 0x136 <estado>
		if(readpinD0 != 0){
 264:	18 99       	sbic	0x03, 0	; 3
 266:	06 c0       	rjmp	.+12     	; 0x274 <secuenciaC+0x92>
			return;
		}
		retardo_ms(tiempo);
 268:	88 ec       	ldi	r24, 0xC8	; 200
 26a:	0e 94 b2 00 	call	0x164	; 0x164 <retardo_ms>
		}
		
	retardo_ms(tiempo);
	}
	
	for(char i=0;i<=3;i++){
 26e:	cf 5f       	subi	r28, 0xFF	; 255
 270:	c4 30       	cpi	r28, 0x04	; 4
 272:	e0 f2       	brcs	.-72     	; 0x22c <secuenciaC+0x4a>
			return;
		}
		retardo_ms(tiempo);
	}
	
}
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <_exit>:
 278:	f8 94       	cli

0000027a <__stop_program>:
 27a:	ff cf       	rjmp	.-2      	; 0x27a <__stop_program>
