
CAMPO_BITS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000152  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000945  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063d  00000000  00000000  00000b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000023a  00000000  00000000  00001166  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000013a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000492  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001856  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

uint8_t cont=0;

int main(void)
{
	DDRBbits.DDRB0=1; //DDR0 COMO ENTRADA DIGITAL
  90:	84 b1       	in	r24, 0x04	; 4
  92:	81 60       	ori	r24, 0x01	; 1
  94:	84 b9       	out	0x04, r24	; 4
	DDRDbits.DDRD0=0; //DDR0 COMO SALIDA DIGITAL
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	8a b9       	out	0x0a, r24	; 10
	DDRDbits.DDRD1=0;
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	8d 7f       	andi	r24, 0xFD	; 253
  a0:	8a b9       	out	0x0a, r24	; 10
	PORTDbits.PD0_=1;
  a2:	8b b1       	in	r24, 0x0b	; 11
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	8b b9       	out	0x0b, r24	; 11
    while (1) 
    {
		if(PINBbits.PINB0_==1){
  a8:	18 9b       	sbis	0x03, 0	; 3
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <main+0x18>
			while(PINBbits.PINB0_==1);
  ac:	18 99       	sbic	0x03, 0	; 3
  ae:	fe cf       	rjmp	.-4      	; 0xac <main+0x1c>
			cont++;
  b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b4:	8f 5f       	subi	r24, 0xFF	; 255
  b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if(cont>1)
  ba:	82 30       	cpi	r24, 0x02	; 2
  bc:	10 f0       	brcs	.+4      	; 0xc2 <main+0x32>
			cont=0;
  be:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(cont==1){
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	21 f4       	brne	.+8      	; 0xd2 <main+0x42>
			PORTDbits.PD1_=1;
  ca:	8b b1       	in	r24, 0x0b	; 11
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	8b b9       	out	0x0b, r24	; 11
  d0:	eb cf       	rjmp	.-42     	; 0xa8 <main+0x18>
		}else{
			PORTDbits.PD1_=0;
  d2:	8b b1       	in	r24, 0x0b	; 11
  d4:	8d 7f       	andi	r24, 0xFD	; 253
  d6:	8b b9       	out	0x0b, r24	; 11
  d8:	e7 cf       	rjmp	.-50     	; 0xa8 <main+0x18>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
