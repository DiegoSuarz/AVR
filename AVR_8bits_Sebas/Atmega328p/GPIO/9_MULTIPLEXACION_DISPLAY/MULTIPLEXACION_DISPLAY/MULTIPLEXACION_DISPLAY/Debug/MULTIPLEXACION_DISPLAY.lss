
MULTIPLEXACION_DISPLAY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000176  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010a  0080010a  00000214  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000809  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006cf  00000000  00000000  00000ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fe  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001484  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000407  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  000018bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000194f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 76 00 	call	0xec	; 0xec <main>
  9e:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <multiplexar>:
	}
}

void multiplexar(){
	
	setTrasn1();
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	85 b9       	out	0x05, r24	; 5
	PORTD = deco_ac[unidades];
  aa:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <unidades>
  ae:	0e 2e       	mov	r0, r30
  b0:	00 0c       	add	r0, r0
  b2:	ff 0b       	sbc	r31, r31
  b4:	e0 50       	subi	r30, 0x00	; 0
  b6:	ff 4f       	sbci	r31, 0xFF	; 255
  b8:	80 81       	ld	r24, Z
  ba:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	8f e1       	ldi	r24, 0x1F	; 31
  be:	9e e4       	ldi	r25, 0x4E	; 78
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <multiplexar+0x1a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <multiplexar+0x20>
  c6:	00 00       	nop
	_delay_ms(tiempo);
	
	setTrasn2();
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	85 b9       	out	0x05, r24	; 5
	PORTD=deco_ac[decenas];
  cc:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
  d0:	0e 2e       	mov	r0, r30
  d2:	00 0c       	add	r0, r0
  d4:	ff 0b       	sbc	r31, r31
  d6:	e0 50       	subi	r30, 0x00	; 0
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
  da:	80 81       	ld	r24, Z
  dc:	8b b9       	out	0x0b, r24	; 11
  de:	8f e1       	ldi	r24, 0x1F	; 31
  e0:	9e e4       	ldi	r25, 0x4E	; 78
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <multiplexar+0x3c>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <multiplexar+0x42>
  e8:	00 00       	nop
  ea:	08 95       	ret

000000ec <main>:
void multiplexar();

int main(void)
{
	/* Replace with your application code */
	DDRD = 0XFF; //Todo el puerto D como salida digital
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<PINB0)|(1<<PINB1)|(1<<PINB2)|(1<<PINB3); //Pines B0,B1,B2,B3 como salida
  f0:	84 b1       	in	r24, 0x04	; 4
  f2:	8f 60       	ori	r24, 0x0F	; 15
  f4:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~((1<<PINB4)|(1<<PINB5));  //PINES B4,B5 como entrada digital
  f6:	84 b1       	in	r24, 0x04	; 4
  f8:	8f 7c       	andi	r24, 0xCF	; 207
  fa:	84 b9       	out	0x04, r24	; 4
	
	
	while (1)
	{
		
		if(getStatusB4() !=0){
  fc:	1c 99       	sbic	0x03, 4	; 3
  fe:	03 c0       	rjmp	.+6      	; 0x106 <main+0x1a>
 100:	0d c0       	rjmp	.+26     	; 0x11c <main+0x30>
			while(getStatusB4()!=0) multiplexar();
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <multiplexar>
 106:	1c 99       	sbic	0x03, 4	; 3
 108:	fc cf       	rjmp	.-8      	; 0x102 <main+0x16>
			contador++;
 10a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <contador>
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <contador>
			if(contador>99){
 114:	84 36       	cpi	r24, 0x64	; 100
 116:	14 f0       	brlt	.+4      	; 0x11c <main+0x30>
				contador=0;
 118:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <contador>
			}
		}
			
		if(getStatusB5() !=0){
 11c:	1d 99       	sbic	0x03, 5	; 3
 11e:	03 c0       	rjmp	.+6      	; 0x126 <main+0x3a>
 120:	0e c0       	rjmp	.+28     	; 0x13e <main+0x52>
			while(getStatusB5()!=0) multiplexar();
 122:	0e 94 53 00 	call	0xa6	; 0xa6 <multiplexar>
 126:	1d 99       	sbic	0x03, 5	; 3
 128:	fc cf       	rjmp	.-8      	; 0x122 <main+0x36>
			contador--;
 12a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <contador>
 12e:	81 50       	subi	r24, 0x01	; 1
 130:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <contador>
			if(contador<0){
 134:	88 23       	and	r24, r24
 136:	1c f4       	brge	.+6      	; 0x13e <main+0x52>
				contador=99;
 138:	83 e6       	ldi	r24, 0x63	; 99
 13a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <contador>
			}
		}			
	 
		decenas = contador/10;
 13e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <contador>
 142:	87 e6       	ldi	r24, 0x67	; 103
 144:	28 02       	muls	r18, r24
 146:	81 2d       	mov	r24, r1
 148:	11 24       	eor	r1, r1
 14a:	85 95       	asr	r24
 14c:	85 95       	asr	r24
 14e:	27 fd       	sbrc	r18, 7
 150:	83 95       	inc	r24
 152:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		residuo=contador%10;
 156:	88 0f       	add	r24, r24
 158:	98 2f       	mov	r25, r24
 15a:	99 0f       	add	r25, r25
 15c:	99 0f       	add	r25, r25
 15e:	89 0f       	add	r24, r25
 160:	92 2f       	mov	r25, r18
 162:	98 1b       	sub	r25, r24
 164:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <residuo>
		unidades = residuo;
 168:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <unidades>
		multiplexar();
 16c:	0e 94 53 00 	call	0xa6	; 0xa6 <multiplexar>
	}
 170:	c5 cf       	rjmp	.-118    	; 0xfc <main+0x10>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
