
PRIORIDAD_INTERRUPCIONES.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b7  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a7  00000000  00000000  00000a23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000327  00000000  00000000  000010ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041b  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001dd  00000000  00000000  000018b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_1>
   8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_2>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_5>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/interrupt.h>
#include <util/delay.h>

int main(void)
{
    DDRB|=((1<<PINB0)|(1<<PINB1)|(1<<PINB2)); //pines B0,B1,B2 como salida
  80:	84 b1       	in	r24, 0x04	; 4
  82:	87 60       	ori	r24, 0x07	; 7
  84:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00; //limpiando el puerto B
  86:	15 b8       	out	0x05, r1	; 5
	
	//interrupciones externas INTx	
	EICRA |= ((1<<ISC00)|(1<<ISC01)|(1<<ISC10)|(1<<ISC11)); //sensibilidad INT0 e INT1 por flancos de bajada
  88:	e9 e6       	ldi	r30, 0x69	; 105
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	8f 60       	ori	r24, 0x0F	; 15
  90:	80 83       	st	Z, r24
    EIMSK |= ((1<<INT0)|(1<<INT1)); //habilitando la mascara de interrupciones INT0 e INT1
  92:	8d b3       	in	r24, 0x1d	; 29
  94:	83 60       	ori	r24, 0x03	; 3
  96:	8d bb       	out	0x1d, r24	; 29
	
	//interrupciones por cambio de estado PCINTx
	PCICR |= (1<<PCIE2); //habilitando las interrupciones PCINT del puerto B
  98:	e8 e6       	ldi	r30, 0x68	; 104
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT16); //habilitando la mascara de la int. PCINT16
  a2:	ed e6       	ldi	r30, 0x6D	; 109
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	80 83       	st	Z, r24
	
	sei(); //habilitando interrupciones globales
  ac:	78 94       	sei
  ae:	ff cf       	rjmp	.-2      	; 0xae <main+0x2e>

000000b0 <__vector_1>:
		
    }
}

//funciones para rutinas de servicio de interrupcion
ISR(INT0_vect){ //vector de interrupcion para la interrupcion externa 0
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	2f 93       	push	r18
  bc:	3f 93       	push	r19
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
	sei();			//anidar interrupciones
  c2:	78 94       	sei
	for(char i=0;i<=5;i++){
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	96 30       	cpi	r25, 0x06	; 6
  c8:	78 f4       	brcc	.+30     	; 0xe8 <__vector_1+0x38>
		PORTB ^= (1<<PORTB0);
  ca:	25 b1       	in	r18, 0x05	; 5
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	82 27       	eor	r24, r18
  d0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	33 ed       	ldi	r19, 0xD3	; 211
  d6:	80 e3       	ldi	r24, 0x30	; 48
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	30 40       	sbci	r19, 0x00	; 0
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <__vector_1+0x28>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <__vector_1+0x32>
  e2:	00 00       	nop
}

//funciones para rutinas de servicio de interrupcion
ISR(INT0_vect){ //vector de interrupcion para la interrupcion externa 0
	sei();			//anidar interrupciones
	for(char i=0;i<=5;i++){
  e4:	9f 5f       	subi	r25, 0xFF	; 255
  e6:	ef cf       	rjmp	.-34     	; 0xc6 <__vector_1+0x16>
		PORTB ^= (1<<PORTB0);
		_delay_ms(1000);
	}
}
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	3f 91       	pop	r19
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_2>:

ISR(INT1_vect){ //vector de interrupcion para la interrupcion externa 1
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
	sei();			//anidar interrupciones
 10c:	78 94       	sei
	for(char i=0;i<=5;i++){
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	96 30       	cpi	r25, 0x06	; 6
 112:	78 f4       	brcc	.+30     	; 0x132 <__vector_2+0x38>
		PORTB ^= (1<<PORTB1);
 114:	25 b1       	in	r18, 0x05	; 5
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	82 27       	eor	r24, r18
 11a:	85 b9       	out	0x05, r24	; 5
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	33 ed       	ldi	r19, 0xD3	; 211
 120:	80 e3       	ldi	r24, 0x30	; 48
 122:	21 50       	subi	r18, 0x01	; 1
 124:	30 40       	sbci	r19, 0x00	; 0
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <__vector_2+0x28>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <__vector_2+0x32>
 12c:	00 00       	nop
	}
}

ISR(INT1_vect){ //vector de interrupcion para la interrupcion externa 1
	sei();			//anidar interrupciones
	for(char i=0;i<=5;i++){
 12e:	9f 5f       	subi	r25, 0xFF	; 255
 130:	ef cf       	rjmp	.-34     	; 0x110 <__vector_2+0x16>
		PORTB ^= (1<<PORTB1);
		_delay_ms(1000);
	}
}
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <__vector_5>:

ISR(PCINT2_vect){ //vector de interrupcion para PCINT16
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
		sei();			//anidar interrupciones
 152:	78 94       	sei
		PORTB ^= (1<<PORTB2);	
 154:	95 b1       	in	r25, 0x05	; 5
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	89 27       	eor	r24, r25
 15a:	85 b9       	out	0x05, r24	; 5
	
}
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
